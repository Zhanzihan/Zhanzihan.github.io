<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>逆元的求法与应用与应用</title>
      <link href="/2018/11/05/%E9%80%86%E5%85%83%E7%9A%84%E6%B1%82%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2018/11/05/%E9%80%86%E5%85%83%E7%9A%84%E6%B1%82%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="逆元的求法与应用"><a href="#逆元的求法与应用" class="headerlink" title="逆元的求法与应用"></a>逆元的求法与应用</h1><p>逆元主要在求m/n（mod p)时发挥作用<br>逆元有好几种求法</p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><h3 id="1-扩展欧几里得"><a href="#1-扩展欧几里得" class="headerlink" title="1.扩展欧几里得"></a>1.扩展欧几里得</h3><p>由 <strong>am≡ 1 (mod p)</strong><br>​    得 <strong>am-pk=1</strong><br>​    此时若有m与p互质就可以用扩展欧几里得求出逆元.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int exgcd(ll a,ll b,ll x,ll y)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="attribute">b</span>==0)&#123;</span><br><span class="line"><span class="attribute">x</span>=1;</span><br><span class="line"><span class="attribute">y</span>=0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="attribute">x1</span>=y;</span><br><span class="line">ll <span class="attribute">y1</span>=x-a/b*y;</span><br><span class="line"><span class="attribute">x</span>=x1,y=y1;</span><br><span class="line">return exgcd(b,a%b,x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-费马小定理"><a href="#2-费马小定理" class="headerlink" title="2.费马小定理"></a>2.费马小定理</h3><p>当p为质数，a与p互质时，有a <sup>p-1</sup> ≡ 1 (mod p)<br>所以a<sup>p-2</sup>≡a<sup>-1</sup><br>至于怎么证明=-=我也不会证明(可能会放到欧拉函数里讲)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inv[a]</span>=quick_power(a,p-<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="3-线性求解1-n逆元（重点）"><a href="#3-线性求解1-n逆元（重点）" class="headerlink" title="3.线性求解1-n逆元（重点）"></a>3.线性求解1-n逆元（重点）</h3><p><strong>am ≡ 1 (mod  p)</strong><br><strong>r*r<sup>-1</sup>=1 (mod p)</strong><br>我们设P=k<em>i+r;<br>所以<br>$\lfloor \frac{p}{i} \rfloor$=k，p%i=r;<br>在mod p的情况下有<br>**k</em>i+r ≡ 0 (mod p)<strong><br>两边同时乘i<sup>-1</sup>,r<sup>-1</sup>有</strong>-k<em>r<sup>-1</sup> ≡ i<sup>-1</sup>*</em><br>带入k有</p><p><strong>-p/i *(p%i)<sup>-1</sup> = i <sup>-1</sup> </strong><br>所以i的逆元可以由p%i的逆元推出</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">inv</span>[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">inv</span>[i]=(-p/i)*<span class="built_in">inv</span>[i];</span><br><span class="line"><span class="built_in">inv</span>[i]=(<span class="built_in">inv</span>[i]%p+p)%p<span class="comment">//(保证为正整数)</span></span><br></pre></td></tr></table></figure><p>线性算法例题：<a href="https://www.luogu.org/problemnew/show/P3811" target="_blank" rel="noopener">洛谷3811</a></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>阶乘逆元</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inv_fac[n]=quick_power(n,p<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span>=n<span class="number">-1</span>;<span class="built_in">i</span>&gt;=<span class="number">1</span>;<span class="built_in">i</span>--)</span><br><span class="line">inv_fac[<span class="built_in">i</span>]=inv_fac[<span class="built_in">i</span>+<span class="number">1</span>]*(<span class="built_in">i</span>+<span class="number">1</span>)<span class="comment">%p;</span></span><br></pre></td></tr></table></figure><p>这里为什么可以这么做手推一下就出来了<br>相当于多除一个数之后再乘回去<br>例题<br><a href="http://noi.ac/contest/31/problem/65" target="_blank" rel="noopener">triangle</a><br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span>=<span class="number">100010</span>;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">MOD</span>=<span class="number">1</span>e9+<span class="number">9</span>;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll fac[<span class="built_in">N</span>+<span class="number">5</span>],inv_fac[<span class="built_in">N</span>+<span class="number">5</span>];</span><br><span class="line">ll quick_power(ll d,ll e)</span><br><span class="line">&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line">while(e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">if</span>(e&amp;<span class="number">1</span>) ans=ans%<span class="built_in">MOD</span>*d%<span class="built_in">MOD</span>;</span><br><span class="line">d=(d*d)%<span class="built_in">MOD</span>;</span><br><span class="line">e&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans%=<span class="built_in">MOD</span>;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">t</span>;</span><br><span class="line">fac[<span class="number">1</span>]=fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">for(<span class="built_in">int</span> i=<span class="number">2</span>;i&lt;<span class="built_in">N</span>;i++)fac[i]=fac[i-<span class="number">1</span>]%<span class="built_in">MOD</span>*i%<span class="built_in">MOD</span>; </span><br><span class="line">inv_fac[<span class="built_in">N</span>-<span class="number">1</span>]=quick_power(fac[<span class="built_in">N</span>-<span class="number">1</span>],<span class="built_in">MOD</span>-<span class="number">2</span>);</span><br><span class="line">for(<span class="built_in">int</span> i=<span class="built_in">N</span>-<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)inv_fac[i]=inv_fac[i+<span class="number">1</span>]%<span class="built_in">MOD</span>*(i+<span class="number">1</span>)%<span class="built_in">MOD</span>;</span><br><span class="line">inv_fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">scanf(<span class="string">"%d"</span>,&amp;<span class="built_in">t</span>);</span><br><span class="line">while(<span class="built_in">t</span>--)</span><br><span class="line">&#123;</span><br><span class="line">ll a,b,<span class="built_in">n</span>,m;</span><br><span class="line">scanf(<span class="string">"%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;<span class="built_in">n</span>,&amp;m);</span><br><span class="line">ll ans=fac[<span class="built_in">n</span>-<span class="number">1</span>]%<span class="built_in">MOD</span>*inv_fac[m-<span class="number">1</span>]%<span class="built_in">MOD</span>*inv_fac[<span class="built_in">n</span>-m]%<span class="built_in">MOD</span>*quick_power(a,<span class="built_in">n</span>-m)%<span class="built_in">MOD</span>*quick_power(b,m-<span class="number">1</span>)%<span class="built_in">MOD</span>;</span><br><span class="line">printf(<span class="string">"%lld\n"</span>,ans%<span class="built_in">MOD</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好</title>
      <link href="/2018/11/02/%E4%BD%A0%E5%A5%BD/"/>
      <url>/2018/11/02/%E4%BD%A0%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<p>终于搭建完成了=-=</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
